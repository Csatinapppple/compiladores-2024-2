[@0,0:0='{',<'{'>,1:0]
[@1,7:11='class',<'class'>,2:4]
[@2,13:19='MyClass',<IDENTIFICADOR>,2:10]
[@3,31:33='int',<'int'>,3:8]
[@4,35:41='myField',<IDENTIFICADOR>,3:12]
[@5,42:42=';',<';'>,3:19]
[@6,53:56='bool',<'bool'>,4:8]
[@7,58:65='myMethod',<IDENTIFICADOR>,4:13]
[@8,66:66='(',<'('>,4:21]
[@9,67:69='int',<'int'>,4:22]
[@10,71:71='x',<IDENTIFICADOR>,4:26]
[@11,72:72=')',<')'>,4:27]
[@12,74:74='{',<'{'>,4:29]
[@13,89:90='if',<'if'>,5:12]
[@14,92:92='(',<'('>,5:15]
[@15,93:93='x',<IDENTIFICADOR>,5:16]
[@16,95:95='<',<'<'>,5:18]
[@17,97:98='10',<DECIMAL>,5:20]
[@18,100:101='or',<'or'>,5:23]
[@19,103:109='myField',<IDENTIFICADOR>,5:26]
[@20,111:112='==',<'=='>,5:34]
[@21,114:115='10',<DECIMAL>,5:37]
[@22,116:116=')',<')'>,5:39]
[@23,118:118='{',<'{'>,5:41]
[@24,137:142='return',<'return'>,6:16]
[@25,144:147='True',<'True'>,6:23]
[@26,148:148=';',<';'>,6:27]
[@27,163:163='}',<'}'>,7:12]
[@28,165:168='else',<'else'>,7:14]
[@29,170:170='{',<'{'>,7:19]
[@30,189:194='return',<'return'>,8:16]
[@31,196:200='False',<'False'>,8:23]
[@32,201:201=';',<';'>,8:28]
[@33,216:216='}',<'}'>,9:12]
[@34,227:227='}',<'}'>,10:8]
[@35,236:239='void',<'void'>,12:4]
[@36,241:255='callMethodIfNot',<IDENTIFICADOR>,12:9]
[@37,256:256='(',<'('>,12:24]
[@38,257:257=')',<')'>,12:25]
[@39,258:258='{',<'{'>,12:26]
[@40,266:267='if',<'if'>,13:5]
[@41,269:269='(',<'('>,13:8]
[@42,270:272='not',<'not'>,13:9]
[@43,273:273='(',<'('>,13:12]
[@44,274:280='myField',<IDENTIFICADOR>,13:13]
[@45,282:283='==',<'=='>,13:21]
[@46,285:286='10',<DECIMAL>,13:24]
[@47,287:287=')',<')'>,13:26]
[@48,288:288=')',<')'>,13:27]
[@49,289:289='{',<'{'>,13:28]
[@50,298:305='myMethod',<IDENTIFICADOR>,14:6]
[@51,306:306='(',<'('>,14:14]
[@52,307:308='10',<DECIMAL>,14:15]
[@53,309:309=')',<')'>,14:17]
[@54,310:310=';',<';'>,14:18]
[@55,318:318='}',<'}'>,15:5]
[@56,325:325='}',<'}'>,16:4]
[@57,334:334='}',<'}'>,18:0]
[@58,337:336='<EOF>',<EOF>,19:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<1>,1:0] rule classDecl
consume [@1,7:11='class',<2>,2:4] rule classDecl
consume [@2,13:19='MyClass',<25>,2:10] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,31:33='int',<8>,3:8] rule dataType
exit    dataType, LT(1)=myField
consume [@4,35:41='myField',<25>,3:12] rule fieldDecl
consume [@5,42:42=';',<4>,3:19] rule fieldDecl
exit    fieldDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@6,53:56='bool',<9>,4:8] rule dataType
exit    dataType, LT(1)=myMethod
consume [@7,58:65='myMethod',<25>,4:13] rule methodDecl
consume [@8,66:66='(',<5>,4:21] rule methodDecl
enter   params, LT(1)=int
enter   param, LT(1)=int
enter   dataType, LT(1)=int
consume [@9,67:69='int',<8>,4:22] rule dataType
exit    dataType, LT(1)=x
consume [@10,71:71='x',<25>,4:26] rule param
exit    param, LT(1)=)
exit    params, LT(1)=)
consume [@11,72:72=')',<6>,4:27] rule methodDecl
enter   block, LT(1)={
consume [@12,74:74='{',<1>,4:29] rule block
enter   stmt, LT(1)=if
enter   conditionalStmt, LT(1)=if
consume [@13,89:90='if',<11>,5:12] rule conditionalStmt
consume [@14,92:92='(',<5>,5:15] rule conditionalStmt
enter   expr, LT(1)=x
enter   logicalOrExpr, LT(1)=x
enter   logicalAndExpr, LT(1)=x
enter   logicalNotExpr, LT(1)=x
enter   equalityExpr, LT(1)=x
enter   relationalExpr, LT(1)=x
enter   additiveExpr, LT(1)=x
enter   multiplicativeExpr, LT(1)=x
enter   primaryExpr, LT(1)=x
consume [@15,93:93='x',<25>,5:16] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@16,95:95='<',<19>,5:18] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@17,97:98='10',<26>,5:20] rule primaryExpr
exit    primaryExpr, LT(1)=or
exit    multiplicativeExpr, LT(1)=or
exit    additiveExpr, LT(1)=or
exit    relationalExpr, LT(1)=or
exit    equalityExpr, LT(1)=or
exit    logicalNotExpr, LT(1)=or
exit    logicalAndExpr, LT(1)=or
enter   logicalOrExpr, LT(1)=or
consume [@18,100:101='or',<15>,5:23] rule logicalOrExpr
enter   logicalAndExpr, LT(1)=myField
enter   logicalNotExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@19,103:109='myField',<25>,5:26] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@20,111:112='==',<18>,5:34] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@21,114:115='10',<26>,5:37] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@22,116:116=')',<6>,5:39] rule conditionalStmt
enter   block, LT(1)={
consume [@23,118:118='{',<1>,5:41] rule block
enter   stmt, LT(1)=return
enter   returnStmt, LT(1)=return
consume [@24,137:142='return',<13>,6:16] rule returnStmt
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   logicalNotExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@25,144:147='True',<23>,6:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@26,148:148=';',<4>,6:27] rule returnStmt
exit    returnStmt, LT(1)=}
exit    stmt, LT(1)=}
consume [@27,163:163='}',<3>,7:12] rule block
exit    block, LT(1)=else
consume [@28,165:168='else',<12>,7:14] rule conditionalStmt
enter   block, LT(1)={
consume [@29,170:170='{',<1>,7:19] rule block
enter   stmt, LT(1)=return
enter   returnStmt, LT(1)=return
consume [@30,189:194='return',<13>,8:16] rule returnStmt
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   logicalNotExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@31,196:200='False',<24>,8:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@32,201:201=';',<4>,8:28] rule returnStmt
exit    returnStmt, LT(1)=}
exit    stmt, LT(1)=}
consume [@33,216:216='}',<3>,9:12] rule block
exit    block, LT(1)=}
exit    conditionalStmt, LT(1)=}
exit    stmt, LT(1)=}
consume [@34,227:227='}',<3>,10:8] rule block
exit    block, LT(1)=void
exit    methodDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@35,236:239='void',<10>,12:4] rule dataType
exit    dataType, LT(1)=callMethodIfNot
consume [@36,241:255='callMethodIfNot',<25>,12:9] rule methodDecl
consume [@37,256:256='(',<5>,12:24] rule methodDecl
consume [@38,257:257=')',<6>,12:25] rule methodDecl
enter   block, LT(1)={
consume [@39,258:258='{',<1>,12:26] rule block
enter   stmt, LT(1)=if
enter   conditionalStmt, LT(1)=if
consume [@40,266:267='if',<11>,13:5] rule conditionalStmt
consume [@41,269:269='(',<5>,13:8] rule conditionalStmt
enter   expr, LT(1)=not
enter   logicalOrExpr, LT(1)=not
enter   logicalAndExpr, LT(1)=not
enter   logicalNotExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@43,273:273='(',<5>,13:12] rule primaryExpr
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   logicalNotExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@44,274:280='myField',<25>,13:13] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@45,282:283='==',<18>,13:21] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@46,285:286='10',<26>,13:24] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@47,287:287=')',<6>,13:26] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@48,288:288=')',<6>,13:27] rule conditionalStmt
enter   block, LT(1)={
consume [@49,289:289='{',<1>,13:28] rule block
enter   stmt, LT(1)=myMethod
exit    stmt, LT(1)=myMethod
enter   stmt, LT(1)=myMethod
exit    stmt, LT(1)=(
enter   stmt, LT(1)=(
enter   exprStmt, LT(1)=(
enter   expr, LT(1)=(
enter   logicalOrExpr, LT(1)=(
enter   logicalAndExpr, LT(1)=(
enter   logicalNotExpr, LT(1)=(
enter   equalityExpr, LT(1)=(
enter   relationalExpr, LT(1)=(
enter   additiveExpr, LT(1)=(
enter   multiplicativeExpr, LT(1)=(
enter   primaryExpr, LT(1)=(
consume [@51,306:306='(',<5>,14:14] rule primaryExpr
enter   expr, LT(1)=10
enter   logicalOrExpr, LT(1)=10
enter   logicalAndExpr, LT(1)=10
enter   logicalNotExpr, LT(1)=10
enter   equalityExpr, LT(1)=10
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@52,307:308='10',<26>,14:15] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@53,309:309=')',<6>,14:17] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@54,310:310=';',<4>,14:18] rule exprStmt
exit    exprStmt, LT(1)=}
exit    stmt, LT(1)=}
consume [@55,318:318='}',<3>,15:5] rule block
exit    block, LT(1)=}
exit    conditionalStmt, LT(1)=}
exit    stmt, LT(1)=}
consume [@56,325:325='}',<3>,16:4] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@57,334:334='}',<3>,18:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@58,337:336='<EOF>',<-1>,19:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (methodDecl:1 (dataType:1 bool) myMethod ( (params:1 (param:1 (dataType:1 int) x)) ) (block:1 { (stmt:1 (conditionalStmt:1 if ( (expr:1 (logicalOrExpr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 x)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) or (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) ) (block:1 { (stmt:2 (returnStmt:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 True))))))))) ;)) }) else (block:1 { (stmt:2 (returnStmt:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 False))))))))) ;)) }))) })) (methodDecl:1 (dataType:1 void) callMethodIfNot ( ) (block:1 { (stmt:1 (conditionalStmt:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:1 not ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) )))))))))) ) (block:1 { (stmt:1 () (stmt:1 myMethod) (stmt:4 (exprStmt:1 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:1 ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) )))))))))) ;)) }))) }))) }) <EOF>)
