[@0,0:0='{',<'{'>,1:0]
[@1,7:11='class',<'class'>,2:4]
[@2,13:19='MyClass',<IDENTIFICADOR>,2:10]
[@3,31:33='int',<'int'>,3:8]
[@4,35:41='myField',<IDENTIFICADOR>,3:12]
[@5,42:42=';',<';'>,3:19]
[@6,53:56='bool',<'bool'>,4:8]
[@7,58:65='myMethod',<IDENTIFICADOR>,4:13]
[@8,66:66='(',<'('>,4:21]
[@9,67:69='int',<'int'>,4:22]
[@10,71:71='x',<IDENTIFICADOR>,4:26]
[@11,72:72=',',<','>,4:27]
[@12,74:77='bool',<'bool'>,4:29]
[@13,79:84='isTrue',<IDENTIFICADOR>,4:34]
[@14,85:85=')',<')'>,4:40]
[@15,87:87='{',<'{'>,4:42]
[@16,102:103='if',<'if'>,5:12]
[@17,105:105='(',<'('>,5:15]
[@18,106:106='x',<IDENTIFICADOR>,5:16]
[@19,108:108='<',<'<'>,5:18]
[@20,110:111='10',<DECIMAL>,5:20]
[@21,113:114='or',<'or'>,5:23]
[@22,116:122='myField',<IDENTIFICADOR>,5:26]
[@23,124:125='==',<'=='>,5:34]
[@24,127:128='10',<DECIMAL>,5:37]
[@25,130:132='and',<'and'>,5:40]
[@26,134:136='not',<'not'>,5:44]
[@27,138:143='isTrue',<IDENTIFICADOR>,5:48]
[@28,144:144=')',<')'>,5:54]
[@29,146:146='{',<'{'>,5:56]
[@30,165:170='return',<'return'>,6:16]
[@31,172:175='True',<'True'>,6:23]
[@32,176:176=';',<';'>,6:27]
[@33,191:191='}',<'}'>,7:12]
[@34,193:196='else',<'else'>,7:14]
[@35,198:198='{',<'{'>,7:19]
[@36,217:222='return',<'return'>,8:16]
[@37,224:228='False',<'False'>,8:23]
[@38,229:229=';',<';'>,8:28]
[@39,244:244='}',<'}'>,9:12]
[@40,255:255='}',<'}'>,10:8]
[@41,264:267='void',<'void'>,12:4]
[@42,269:283='callMethodIfNot',<IDENTIFICADOR>,12:9]
[@43,284:284='(',<'('>,12:24]
[@44,285:285=')',<')'>,12:25]
[@45,286:286='{',<'{'>,12:26]
[@46,294:295='if',<'if'>,13:5]
[@47,297:297='(',<'('>,13:8]
[@48,298:300='not',<'not'>,13:9]
[@49,302:308='myField',<IDENTIFICADOR>,13:13]
[@50,310:311='==',<'=='>,13:21]
[@51,313:314='10',<DECIMAL>,13:24]
[@52,315:315=')',<')'>,13:26]
[@53,316:316='{',<'{'>,13:27]
[@54,325:332='myMethod',<IDENTIFICADOR>,14:6]
[@55,333:333='(',<'('>,14:14]
[@56,334:335='10',<DECIMAL>,14:15]
[@57,336:336=')',<')'>,14:17]
[@58,337:337=';',<';'>,14:18]
[@59,345:345='}',<'}'>,15:5]
[@60,352:352='}',<'}'>,16:4]
[@61,361:361='}',<'}'>,18:0]
[@62,364:363='<EOF>',<EOF>,19:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<1>,1:0] rule classDecl
consume [@1,7:11='class',<2>,2:4] rule classDecl
consume [@2,13:19='MyClass',<25>,2:10] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,31:33='int',<8>,3:8] rule dataType
exit    dataType, LT(1)=myField
consume [@4,35:41='myField',<25>,3:12] rule fieldDecl
consume [@5,42:42=';',<4>,3:19] rule fieldDecl
exit    fieldDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@6,53:56='bool',<9>,4:8] rule dataType
exit    dataType, LT(1)=myMethod
consume [@7,58:65='myMethod',<25>,4:13] rule methodDecl
consume [@8,66:66='(',<5>,4:21] rule methodDecl
enter   params, LT(1)=int
enter   param, LT(1)=int
enter   dataType, LT(1)=int
consume [@9,67:69='int',<8>,4:22] rule dataType
exit    dataType, LT(1)=x
consume [@10,71:71='x',<25>,4:26] rule param
exit    param, LT(1)=,
consume [@11,72:72=',',<7>,4:27] rule params
enter   param, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@12,74:77='bool',<9>,4:29] rule dataType
exit    dataType, LT(1)=isTrue
consume [@13,79:84='isTrue',<25>,4:34] rule param
exit    param, LT(1)=)
exit    params, LT(1)=)
consume [@14,85:85=')',<6>,4:40] rule methodDecl
enter   block, LT(1)={
consume [@15,87:87='{',<1>,4:42] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@16,102:103='if',<11>,5:12] rule conditional
consume [@17,105:105='(',<5>,5:15] rule conditional
enter   expr, LT(1)=x
enter   logicalOrExpr, LT(1)=x
enter   logicalAndExpr, LT(1)=x
enter   logicalNotExpr, LT(1)=x
enter   equalityExpr, LT(1)=x
enter   relationalExpr, LT(1)=x
enter   additiveExpr, LT(1)=x
enter   multiplicativeExpr, LT(1)=x
enter   primaryExpr, LT(1)=x
consume [@18,106:106='x',<25>,5:16] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@19,108:108='<',<19>,5:18] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@20,110:111='10',<26>,5:20] rule primaryExpr
exit    primaryExpr, LT(1)=or
exit    multiplicativeExpr, LT(1)=or
exit    additiveExpr, LT(1)=or
exit    relationalExpr, LT(1)=or
exit    equalityExpr, LT(1)=or
exit    logicalNotExpr, LT(1)=or
exit    logicalAndExpr, LT(1)=or
enter   logicalOrExpr, LT(1)=or
consume [@21,113:114='or',<15>,5:23] rule logicalOrExpr
enter   logicalAndExpr, LT(1)=myField
enter   logicalNotExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@22,116:122='myField',<25>,5:26] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@23,124:125='==',<18>,5:34] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@24,127:128='10',<26>,5:37] rule primaryExpr
exit    primaryExpr, LT(1)=and
exit    multiplicativeExpr, LT(1)=and
exit    additiveExpr, LT(1)=and
exit    relationalExpr, LT(1)=and
exit    equalityExpr, LT(1)=and
exit    logicalNotExpr, LT(1)=and
enter   logicalAndExpr, LT(1)=and
consume [@25,130:132='and',<16>,5:40] rule logicalAndExpr
enter   logicalNotExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@27,138:143='isTrue',<25>,5:48] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@28,144:144=')',<6>,5:54] rule conditional
enter   block, LT(1)={
consume [@29,146:146='{',<1>,5:56] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@30,165:170='return',<13>,6:16] rule return
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   logicalNotExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@31,172:175='True',<23>,6:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@32,176:176=';',<4>,6:27] rule stmt
exit    stmt, LT(1)=}
consume [@33,191:191='}',<3>,7:12] rule block
exit    block, LT(1)=else
consume [@34,193:196='else',<12>,7:14] rule conditional
enter   block, LT(1)={
consume [@35,198:198='{',<1>,7:19] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@36,217:222='return',<13>,8:16] rule return
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   logicalNotExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@37,224:228='False',<24>,8:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@38,229:229=';',<4>,8:28] rule stmt
exit    stmt, LT(1)=}
consume [@39,244:244='}',<3>,9:12] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@40,255:255='}',<3>,10:8] rule block
exit    block, LT(1)=void
exit    methodDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@41,264:267='void',<10>,12:4] rule dataType
exit    dataType, LT(1)=callMethodIfNot
consume [@42,269:283='callMethodIfNot',<25>,12:9] rule methodDecl
consume [@43,284:284='(',<5>,12:24] rule methodDecl
consume [@44,285:285=')',<6>,12:25] rule methodDecl
enter   block, LT(1)={
consume [@45,286:286='{',<1>,12:26] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@46,294:295='if',<11>,13:5] rule conditional
consume [@47,297:297='(',<5>,13:8] rule conditional
enter   expr, LT(1)=not
enter   logicalOrExpr, LT(1)=not
enter   logicalAndExpr, LT(1)=not
enter   logicalNotExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@49,302:308='myField',<25>,13:13] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@50,310:311='==',<18>,13:21] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@51,313:314='10',<26>,13:24] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@52,315:315=')',<6>,13:26] rule conditional
enter   block, LT(1)={
consume [@53,316:316='{',<1>,13:27] rule block
enter   stmt, LT(1)=myMethod
exit    stmt, LT(1)=myMethod
enter   stmt, LT(1)=myMethod
exit    stmt, LT(1)=(
enter   stmt, LT(1)=(
enter   expr, LT(1)=(
enter   logicalOrExpr, LT(1)=(
enter   logicalAndExpr, LT(1)=(
enter   logicalNotExpr, LT(1)=(
enter   equalityExpr, LT(1)=(
enter   relationalExpr, LT(1)=(
enter   additiveExpr, LT(1)=(
enter   multiplicativeExpr, LT(1)=(
enter   primaryExpr, LT(1)=(
consume [@55,333:333='(',<5>,14:14] rule primaryExpr
enter   expr, LT(1)=10
enter   logicalOrExpr, LT(1)=10
enter   logicalAndExpr, LT(1)=10
enter   logicalNotExpr, LT(1)=10
enter   equalityExpr, LT(1)=10
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@56,334:335='10',<26>,14:15] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalNotExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@57,336:336=')',<6>,14:17] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalNotExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@58,337:337=';',<4>,14:18] rule stmt
exit    stmt, LT(1)=}
consume [@59,345:345='}',<3>,15:5] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@60,352:352='}',<3>,16:4] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@61,361:361='}',<3>,18:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@62,364:363='<EOF>',<-1>,19:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (methodDecl:1 (dataType:1 bool) myMethod ( (params:1 (param:1 (dataType:1 int) x) , (param:1 (dataType:1 bool) isTrue)) ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 x)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) or (logicalAndExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))) and (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 not isTrue))))))))) ) (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 True)))))))))) ;) }) else (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 False)))))))))) ;) }))) })) (methodDecl:1 (dataType:1 void) callMethodIfNot ( ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 not myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) ) (block:1 { (stmt:1 () (stmt:1 myMethod) (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:1 ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (logicalNotExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) )))))))))) ;) }))) }))) }) <EOF>)
