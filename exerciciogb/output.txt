[@0,0:0='{',<'{'>,1:0]
[@1,7:11='class',<'class'>,2:4]
[@2,13:19='MyClass',<IDENTIFICADOR>,2:10]
[@3,31:33='int',<'int'>,3:8]
[@4,35:41='myField',<IDENTIFICADOR>,3:12]
[@5,42:42=';',<';'>,3:19]
[@6,51:54='void',<'void'>,5:4]
[@7,56:59='main',<IDENTIFICADOR>,5:9]
[@8,60:60='(',<'('>,5:13]
[@9,61:61=')',<')'>,5:14]
[@10,63:63='{',<'{'>,5:16]
[@11,78:84='myField',<IDENTIFICADOR>,7:5]
[@12,86:86='=',<'='>,7:13]
[@13,88:88='0',<DECIMAL>,7:15]
[@14,89:89=';',<';'>,7:16]
[@15,97:101='while',<'while'>,8:5]
[@16,102:102='(',<'('>,8:10]
[@17,103:109='myField',<IDENTIFICADOR>,8:11]
[@18,111:111='<',<'<'>,8:19]
[@19,113:114='10',<DECIMAL>,8:21]
[@20,115:115=')',<')'>,8:23]
[@21,116:116='{',<'{'>,8:24]
[@22,125:131='myField',<IDENTIFICADOR>,9:6]
[@23,133:133='=',<'='>,9:14]
[@24,135:141='myField',<IDENTIFICADOR>,9:16]
[@25,143:143='+',<'+'>,9:24]
[@26,145:145='1',<DECIMAL>,9:26]
[@27,146:146=';',<';'>,9:27]
[@28,154:154='}',<'}'>,10:5]
[@29,162:176='callMethodIfNot',<IDENTIFICADOR>,11:5]
[@30,177:177='(',<'('>,11:20]
[@31,178:178=')',<')'>,11:21]
[@32,179:179=';',<';'>,11:22]
[@33,188:188='}',<'}'>,13:4]
[@34,201:204='bool',<'bool'>,15:8]
[@35,206:213='myMethod',<IDENTIFICADOR>,15:13]
[@36,214:214='(',<'('>,15:21]
[@37,215:217='int',<'int'>,15:22]
[@38,219:219='x',<IDENTIFICADOR>,15:26]
[@39,220:220=',',<','>,15:27]
[@40,222:225='bool',<'bool'>,15:29]
[@41,227:232='isTrue',<IDENTIFICADOR>,15:34]
[@42,233:233=')',<')'>,15:40]
[@43,235:235='{',<'{'>,15:42]
[@44,250:251='if',<'if'>,16:12]
[@45,253:253='(',<'('>,16:15]
[@46,254:254='x',<IDENTIFICADOR>,16:16]
[@47,256:256='<',<'<'>,16:18]
[@48,258:259='10',<DECIMAL>,16:20]
[@49,261:262='or',<'or'>,16:23]
[@50,264:270='myField',<IDENTIFICADOR>,16:26]
[@51,272:273='==',<'=='>,16:34]
[@52,275:276='10',<DECIMAL>,16:37]
[@53,278:280='and',<'and'>,16:40]
[@54,282:284='not',<'not'>,16:44]
[@55,286:291='isTrue',<IDENTIFICADOR>,16:48]
[@56,292:292=')',<')'>,16:54]
[@57,294:294='{',<'{'>,16:56]
[@58,313:318='return',<'return'>,17:16]
[@59,320:323='True',<'True'>,17:23]
[@60,324:324=';',<';'>,17:27]
[@61,339:339='}',<'}'>,18:12]
[@62,341:344='else',<'else'>,18:14]
[@63,346:346='{',<'{'>,18:19]
[@64,365:370='return',<'return'>,19:16]
[@65,372:376='False',<'False'>,19:23]
[@66,377:377=';',<';'>,19:28]
[@67,392:392='}',<'}'>,20:12]
[@68,403:403='}',<'}'>,21:8]
[@69,412:415='void',<'void'>,23:4]
[@70,417:431='callMethodIfNot',<IDENTIFICADOR>,23:9]
[@71,432:432='(',<'('>,23:24]
[@72,433:433=')',<')'>,23:25]
[@73,434:434='{',<'{'>,23:26]
[@74,442:443='if',<'if'>,24:5]
[@75,445:445='(',<'('>,24:8]
[@76,446:448='not',<'not'>,24:9]
[@77,450:456='myField',<IDENTIFICADOR>,24:13]
[@78,458:459='==',<'=='>,24:21]
[@79,461:462='10',<DECIMAL>,24:24]
[@80,463:463=')',<')'>,24:26]
[@81,464:464='{',<'{'>,24:27]
[@82,473:480='myMethod',<IDENTIFICADOR>,25:6]
[@83,481:481='(',<'('>,25:14]
[@84,482:483='10',<DECIMAL>,25:15]
[@85,484:484=')',<')'>,25:17]
[@86,485:485=';',<';'>,25:18]
[@87,493:493='}',<'}'>,26:5]
[@88,502:502='}',<'}'>,28:4]
[@89,511:511='}',<'}'>,30:0]
[@90,514:513='<EOF>',<EOF>,31:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<1>,1:0] rule classDecl
consume [@1,7:11='class',<2>,2:4] rule classDecl
consume [@2,13:19='MyClass',<26>,2:10] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,31:33='int',<8>,3:8] rule dataType
exit    dataType, LT(1)=myField
consume [@4,35:41='myField',<26>,3:12] rule fieldDecl
consume [@5,42:42=';',<4>,3:19] rule fieldDecl
exit    fieldDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@6,51:54='void',<10>,5:4] rule dataType
exit    dataType, LT(1)=main
consume [@7,56:59='main',<26>,5:9] rule methodDecl
consume [@8,60:60='(',<5>,5:13] rule methodDecl
consume [@9,61:61=')',<6>,5:14] rule methodDecl
enter   block, LT(1)={
consume [@10,63:63='{',<1>,5:16] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@11,78:84='myField',<26>,7:5] rule assign
consume [@12,86:86='=',<15>,7:13] rule assign
enter   expr, LT(1)=0
enter   logicalOrExpr, LT(1)=0
enter   logicalAndExpr, LT(1)=0
enter   equalityExpr, LT(1)=0
enter   relationalExpr, LT(1)=0
enter   additiveExpr, LT(1)=0
enter   multiplicativeExpr, LT(1)=0
enter   primaryExpr, LT(1)=0
consume [@13,88:88='0',<27>,7:15] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@14,89:89=';',<4>,7:16] rule stmt
exit    stmt, LT(1)=while
enter   stmt, LT(1)=while
enter   conditional, LT(1)=while
consume [@15,97:101='while',<13>,8:5] rule conditional
consume [@16,102:102='(',<5>,8:10] rule conditional
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@17,103:109='myField',<26>,8:11] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@18,111:111='<',<19>,8:19] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@19,113:114='10',<27>,8:21] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@20,115:115=')',<6>,8:23] rule conditional
enter   block, LT(1)={
consume [@21,116:116='{',<1>,8:24] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@22,125:131='myField',<26>,9:6] rule assign
consume [@23,133:133='=',<15>,9:14] rule assign
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@24,135:141='myField',<26>,9:16] rule primaryExpr
exit    primaryExpr, LT(1)=+
exit    multiplicativeExpr, LT(1)=+
enter   additiveExpr, LT(1)=+
consume [@25,143:143='+',<21>,9:24] rule additiveExpr
enter   multiplicativeExpr, LT(1)=1
enter   primaryExpr, LT(1)=1
consume [@26,145:145='1',<27>,9:26] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@27,146:146=';',<4>,9:27] rule stmt
exit    stmt, LT(1)=}
consume [@28,154:154='}',<3>,10:5] rule block
exit    block, LT(1)=callMethodIfNot
exit    conditional, LT(1)=callMethodIfNot
exit    stmt, LT(1)=callMethodIfNot
enter   stmt, LT(1)=callMethodIfNot
enter   expr, LT(1)=callMethodIfNot
enter   logicalOrExpr, LT(1)=callMethodIfNot
enter   logicalAndExpr, LT(1)=callMethodIfNot
enter   equalityExpr, LT(1)=callMethodIfNot
enter   relationalExpr, LT(1)=callMethodIfNot
enter   additiveExpr, LT(1)=callMethodIfNot
enter   multiplicativeExpr, LT(1)=callMethodIfNot
enter   primaryExpr, LT(1)=callMethodIfNot
enter   methodCall, LT(1)=callMethodIfNot
consume [@29,162:176='callMethodIfNot',<26>,11:5] rule methodCall
consume [@30,177:177='(',<5>,11:20] rule methodCall
consume [@31,178:178=')',<6>,11:21] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@32,179:179=';',<4>,11:22] rule stmt
exit    stmt, LT(1)=}
consume [@33,188:188='}',<3>,13:4] rule block
exit    block, LT(1)=bool
exit    methodDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@34,201:204='bool',<9>,15:8] rule dataType
exit    dataType, LT(1)=myMethod
consume [@35,206:213='myMethod',<26>,15:13] rule methodDecl
consume [@36,214:214='(',<5>,15:21] rule methodDecl
enter   params, LT(1)=int
enter   param, LT(1)=int
enter   dataType, LT(1)=int
consume [@37,215:217='int',<8>,15:22] rule dataType
exit    dataType, LT(1)=x
consume [@38,219:219='x',<26>,15:26] rule param
exit    param, LT(1)=,
consume [@39,220:220=',',<7>,15:27] rule params
enter   param, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@40,222:225='bool',<9>,15:29] rule dataType
exit    dataType, LT(1)=isTrue
consume [@41,227:232='isTrue',<26>,15:34] rule param
exit    param, LT(1)=)
exit    params, LT(1)=)
consume [@42,233:233=')',<6>,15:40] rule methodDecl
enter   block, LT(1)={
consume [@43,235:235='{',<1>,15:42] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@44,250:251='if',<11>,16:12] rule conditional
consume [@45,253:253='(',<5>,16:15] rule conditional
enter   expr, LT(1)=x
enter   logicalOrExpr, LT(1)=x
enter   logicalAndExpr, LT(1)=x
enter   equalityExpr, LT(1)=x
enter   relationalExpr, LT(1)=x
enter   additiveExpr, LT(1)=x
enter   multiplicativeExpr, LT(1)=x
enter   primaryExpr, LT(1)=x
consume [@46,254:254='x',<26>,16:16] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@47,256:256='<',<19>,16:18] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@48,258:259='10',<27>,16:20] rule primaryExpr
exit    primaryExpr, LT(1)=or
exit    multiplicativeExpr, LT(1)=or
exit    additiveExpr, LT(1)=or
exit    relationalExpr, LT(1)=or
exit    equalityExpr, LT(1)=or
exit    logicalAndExpr, LT(1)=or
enter   logicalOrExpr, LT(1)=or
consume [@49,261:262='or',<16>,16:23] rule logicalOrExpr
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@50,264:270='myField',<26>,16:26] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@51,272:273='==',<18>,16:34] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@52,275:276='10',<27>,16:37] rule primaryExpr
exit    primaryExpr, LT(1)=and
exit    multiplicativeExpr, LT(1)=and
exit    additiveExpr, LT(1)=and
exit    relationalExpr, LT(1)=and
exit    equalityExpr, LT(1)=and
enter   logicalAndExpr, LT(1)=and
consume [@53,278:280='and',<17>,16:40] rule logicalAndExpr
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@54,282:284='not',<25>,16:44] rule primaryExpr
enter   primaryExpr, LT(1)=isTrue
consume [@55,286:291='isTrue',<26>,16:48] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@56,292:292=')',<6>,16:54] rule conditional
enter   block, LT(1)={
consume [@57,294:294='{',<1>,16:56] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@58,313:318='return',<14>,17:16] rule return
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@59,320:323='True',<23>,17:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@60,324:324=';',<4>,17:27] rule stmt
exit    stmt, LT(1)=}
consume [@61,339:339='}',<3>,18:12] rule block
exit    block, LT(1)=else
consume [@62,341:344='else',<12>,18:14] rule conditional
enter   block, LT(1)={
consume [@63,346:346='{',<1>,18:19] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@64,365:370='return',<14>,19:16] rule return
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@65,372:376='False',<24>,19:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@66,377:377=';',<4>,19:28] rule stmt
exit    stmt, LT(1)=}
consume [@67,392:392='}',<3>,20:12] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@68,403:403='}',<3>,21:8] rule block
exit    block, LT(1)=void
exit    methodDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@69,412:415='void',<10>,23:4] rule dataType
exit    dataType, LT(1)=callMethodIfNot
consume [@70,417:431='callMethodIfNot',<26>,23:9] rule methodDecl
consume [@71,432:432='(',<5>,23:24] rule methodDecl
consume [@72,433:433=')',<6>,23:25] rule methodDecl
enter   block, LT(1)={
consume [@73,434:434='{',<1>,23:26] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@74,442:443='if',<11>,24:5] rule conditional
consume [@75,445:445='(',<5>,24:8] rule conditional
enter   expr, LT(1)=not
enter   logicalOrExpr, LT(1)=not
enter   logicalAndExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@76,446:448='not',<25>,24:9] rule primaryExpr
enter   primaryExpr, LT(1)=myField
consume [@77,450:456='myField',<26>,24:13] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@78,458:459='==',<18>,24:21] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@79,461:462='10',<27>,24:24] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@80,463:463=')',<6>,24:26] rule conditional
enter   block, LT(1)={
consume [@81,464:464='{',<1>,24:27] rule block
enter   stmt, LT(1)=myMethod
enter   expr, LT(1)=myMethod
enter   logicalOrExpr, LT(1)=myMethod
enter   logicalAndExpr, LT(1)=myMethod
enter   equalityExpr, LT(1)=myMethod
enter   relationalExpr, LT(1)=myMethod
enter   additiveExpr, LT(1)=myMethod
enter   multiplicativeExpr, LT(1)=myMethod
enter   primaryExpr, LT(1)=myMethod
enter   methodCall, LT(1)=myMethod
consume [@82,473:480='myMethod',<26>,25:6] rule methodCall
consume [@83,481:481='(',<5>,25:14] rule methodCall
enter   arguments, LT(1)=10
enter   argument, LT(1)=10
enter   expr, LT(1)=10
enter   logicalOrExpr, LT(1)=10
enter   logicalAndExpr, LT(1)=10
enter   equalityExpr, LT(1)=10
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@84,482:483='10',<27>,25:15] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
exit    argument, LT(1)=)
exit    arguments, LT(1)=)
consume [@85,484:484=')',<6>,25:17] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@86,485:485=';',<4>,25:18] rule stmt
exit    stmt, LT(1)=}
consume [@87,493:493='}',<3>,26:5] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@88,502:502='}',<3>,28:4] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@89,511:511='}',<3>,30:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@90,514:513='<EOF>',<-1>,31:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (methodDecl:1 (dataType:1 void) main ( ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 0))))))))) ;) (stmt:1 (conditional:2 while ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))) + (multiplicativeExpr:1 (primaryExpr:3 1))))))))) ;) }))) (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 callMethodIfNot ( )))))))))) ;) })) (methodDecl:1 (dataType:1 bool) myMethod ( (params:1 (param:1 (dataType:1 int) x) , (param:1 (dataType:1 bool) isTrue)) ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 x)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))) or (logicalAndExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))) and (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 isTrue))))))))) ) (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 True))))))))) ;) }) else (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:6 False))))))))) ;) }))) })) (methodDecl:1 (dataType:1 void) callMethodIfNot ( ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 myField)))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 myMethod ( (arguments:1 (argument:1 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))))) )))))))))) ;) }))) }))) }) <EOF>)
