[@0,0:0='{',<'{'>,1:0]
[@1,2:6='class',<'class'>,1:2]
[@2,8:14='MyClass',<IDENTIFICADOR>,1:8]
[@3,22:24='int',<'int'>,3:1]
[@4,26:32='myField',<IDENTIFICADOR>,3:5]
[@5,33:33=';',<';'>,3:12]
[@6,39:42='void',<'void'>,5:1]
[@7,44:47='main',<IDENTIFICADOR>,5:6]
[@8,48:48='(',<'('>,5:10]
[@9,49:49=')',<')'>,5:11]
[@10,51:51='{',<'{'>,5:13]
[@11,58:64='myField',<IDENTIFICADOR>,7:2]
[@12,66:66='=',<'='>,7:10]
[@13,68:68='0',<DECIMAL>,7:12]
[@14,69:69=';',<';'>,7:13]
[@15,74:78='while',<'while'>,8:2]
[@16,80:80='(',<'('>,8:8]
[@17,81:87='myField',<IDENTIFICADOR>,8:9]
[@18,89:89='<',<'<'>,8:17]
[@19,91:92='10',<DECIMAL>,8:19]
[@20,93:93=')',<')'>,8:21]
[@21,94:94='{',<'{'>,8:22]
[@22,100:106='myField',<IDENTIFICADOR>,9:3]
[@23,108:108='=',<'='>,9:11]
[@24,110:116='myField',<IDENTIFICADOR>,9:13]
[@25,118:118='+',<'+'>,9:21]
[@26,120:120='1',<DECIMAL>,9:23]
[@27,121:121=';',<';'>,9:24]
[@28,126:126='}',<'}'>,10:2]
[@29,131:145='callMethodIfNot',<IDENTIFICADOR>,11:2]
[@30,146:146='(',<'('>,11:17]
[@31,147:147=')',<')'>,11:18]
[@32,148:148=';',<';'>,11:19]
[@33,154:154='}',<'}'>,13:1]
[@34,160:163='bool',<'bool'>,15:1]
[@35,165:172='myMethod',<IDENTIFICADOR>,15:6]
[@36,173:173='(',<'('>,15:14]
[@37,174:176='int',<'int'>,15:15]
[@38,178:178='x',<IDENTIFICADOR>,15:19]
[@39,179:179=',',<','>,15:20]
[@40,181:184='bool',<'bool'>,15:22]
[@41,186:191='isTrue',<IDENTIFICADOR>,15:27]
[@42,192:192=')',<')'>,15:33]
[@43,194:194='{',<'{'>,15:35]
[@44,199:200='if',<'if'>,16:2]
[@45,202:202='(',<'('>,16:5]
[@46,203:203='x',<IDENTIFICADOR>,16:6]
[@47,205:205='<',<'<'>,16:8]
[@48,207:208='10',<DECIMAL>,16:10]
[@49,210:211='or',<'or'>,16:13]
[@50,213:219='myField',<IDENTIFICADOR>,16:16]
[@51,221:222='==',<'=='>,16:24]
[@52,224:225='10',<DECIMAL>,16:27]
[@53,227:229='and',<'and'>,16:30]
[@54,231:233='not',<'not'>,16:34]
[@55,235:240='isTrue',<IDENTIFICADOR>,16:38]
[@56,241:241=')',<')'>,16:44]
[@57,243:243='{',<'{'>,16:46]
[@58,249:254='return',<'return'>,17:3]
[@59,256:259='True',<'True'>,17:10]
[@60,260:260=';',<';'>,17:14]
[@61,265:265='}',<'}'>,18:2]
[@62,267:270='else',<'else'>,18:4]
[@63,272:272='{',<'{'>,18:9]
[@64,278:283='return',<'return'>,19:3]
[@65,285:289='False',<'False'>,19:10]
[@66,290:290=';',<';'>,19:15]
[@67,295:295='}',<'}'>,20:2]
[@68,299:299='}',<'}'>,21:1]
[@69,305:308='void',<'void'>,23:1]
[@70,310:324='callMethodIfNot',<IDENTIFICADOR>,23:6]
[@71,325:325='(',<'('>,23:21]
[@72,326:326=')',<')'>,23:22]
[@73,327:327='{',<'{'>,23:23]
[@74,332:333='if',<'if'>,24:2]
[@75,335:335='(',<'('>,24:5]
[@76,336:338='not',<'not'>,24:6]
[@77,340:346='myField',<IDENTIFICADOR>,24:10]
[@78,348:349='==',<'=='>,24:18]
[@79,351:352='10',<DECIMAL>,24:21]
[@80,353:353=')',<')'>,24:23]
[@81,354:354='{',<'{'>,24:24]
[@82,360:367='myMethod',<IDENTIFICADOR>,25:3]
[@83,368:368='(',<'('>,25:11]
[@84,369:370='10',<DECIMAL>,25:12]
[@85,371:371=')',<')'>,25:14]
[@86,372:372=';',<';'>,25:15]
[@87,377:377='}',<'}'>,26:2]
[@88,381:381='}',<'}'>,27:1]
[@89,386:386='}',<'}'>,29:0]
[@90,389:388='<EOF>',<EOF>,30:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<1>,1:0] rule classDecl
consume [@1,2:6='class',<2>,1:2] rule classDecl
consume [@2,8:14='MyClass',<26>,1:8] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,22:24='int',<8>,3:1] rule dataType
exit    dataType, LT(1)=myField
consume [@4,26:32='myField',<26>,3:5] rule fieldDecl
consume [@5,33:33=';',<4>,3:12] rule fieldDecl
exit    fieldDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@6,39:42='void',<10>,5:1] rule dataType
exit    dataType, LT(1)=main
consume [@7,44:47='main',<26>,5:6] rule methodDecl
consume [@8,48:48='(',<5>,5:10] rule methodDecl
consume [@9,49:49=')',<6>,5:11] rule methodDecl
enter   block, LT(1)={
consume [@10,51:51='{',<1>,5:13] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@11,58:64='myField',<26>,7:2] rule assign
consume [@12,66:66='=',<15>,7:10] rule assign
enter   expr, LT(1)=0
enter   logicalOrExpr, LT(1)=0
enter   logicalAndExpr, LT(1)=0
enter   equalityExpr, LT(1)=0
enter   relationalExpr, LT(1)=0
enter   additiveExpr, LT(1)=0
enter   multiplicativeExpr, LT(1)=0
enter   primaryExpr, LT(1)=0
consume [@13,68:68='0',<27>,7:12] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@14,69:69=';',<4>,7:13] rule stmt
exit    stmt, LT(1)=while
enter   stmt, LT(1)=while
enter   conditional, LT(1)=while
consume [@15,74:78='while',<13>,8:2] rule conditional
consume [@16,80:80='(',<5>,8:8] rule conditional
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@17,81:87='myField',<26>,8:9] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@18,89:89='<',<19>,8:17] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@19,91:92='10',<27>,8:19] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@20,93:93=')',<6>,8:21] rule conditional
enter   block, LT(1)={
consume [@21,94:94='{',<1>,8:22] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@22,100:106='myField',<26>,9:3] rule assign
consume [@23,108:108='=',<15>,9:11] rule assign
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@24,110:116='myField',<26>,9:13] rule primaryExpr
exit    primaryExpr, LT(1)=+
exit    multiplicativeExpr, LT(1)=+
enter   additiveExpr, LT(1)=+
consume [@25,118:118='+',<21>,9:21] rule additiveExpr
enter   multiplicativeExpr, LT(1)=1
enter   primaryExpr, LT(1)=1
consume [@26,120:120='1',<27>,9:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@27,121:121=';',<4>,9:24] rule stmt
exit    stmt, LT(1)=}
consume [@28,126:126='}',<3>,10:2] rule block
exit    block, LT(1)=callMethodIfNot
exit    conditional, LT(1)=callMethodIfNot
exit    stmt, LT(1)=callMethodIfNot
enter   stmt, LT(1)=callMethodIfNot
enter   expr, LT(1)=callMethodIfNot
enter   logicalOrExpr, LT(1)=callMethodIfNot
enter   logicalAndExpr, LT(1)=callMethodIfNot
enter   equalityExpr, LT(1)=callMethodIfNot
enter   relationalExpr, LT(1)=callMethodIfNot
enter   additiveExpr, LT(1)=callMethodIfNot
enter   multiplicativeExpr, LT(1)=callMethodIfNot
enter   primaryExpr, LT(1)=callMethodIfNot
enter   methodCall, LT(1)=callMethodIfNot
consume [@29,131:145='callMethodIfNot',<26>,11:2] rule methodCall
consume [@30,146:146='(',<5>,11:17] rule methodCall
consume [@31,147:147=')',<6>,11:18] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@32,148:148=';',<4>,11:19] rule stmt
exit    stmt, LT(1)=}
consume [@33,154:154='}',<3>,13:1] rule block
exit    block, LT(1)=bool
exit    methodDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@34,160:163='bool',<9>,15:1] rule dataType
exit    dataType, LT(1)=myMethod
consume [@35,165:172='myMethod',<26>,15:6] rule methodDecl
consume [@36,173:173='(',<5>,15:14] rule methodDecl
enter   params, LT(1)=int
enter   param, LT(1)=int
enter   dataType, LT(1)=int
consume [@37,174:176='int',<8>,15:15] rule dataType
exit    dataType, LT(1)=x
consume [@38,178:178='x',<26>,15:19] rule param
exit    param, LT(1)=,
consume [@39,179:179=',',<7>,15:20] rule params
enter   param, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@40,181:184='bool',<9>,15:22] rule dataType
exit    dataType, LT(1)=isTrue
consume [@41,186:191='isTrue',<26>,15:27] rule param
exit    param, LT(1)=)
exit    params, LT(1)=)
consume [@42,192:192=')',<6>,15:33] rule methodDecl
enter   block, LT(1)={
consume [@43,194:194='{',<1>,15:35] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@44,199:200='if',<11>,16:2] rule conditional
consume [@45,202:202='(',<5>,16:5] rule conditional
enter   expr, LT(1)=x
enter   logicalOrExpr, LT(1)=x
enter   logicalAndExpr, LT(1)=x
enter   equalityExpr, LT(1)=x
enter   relationalExpr, LT(1)=x
enter   additiveExpr, LT(1)=x
enter   multiplicativeExpr, LT(1)=x
enter   primaryExpr, LT(1)=x
consume [@46,203:203='x',<26>,16:6] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@47,205:205='<',<19>,16:8] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@48,207:208='10',<27>,16:10] rule primaryExpr
exit    primaryExpr, LT(1)=or
exit    multiplicativeExpr, LT(1)=or
exit    additiveExpr, LT(1)=or
exit    relationalExpr, LT(1)=or
exit    equalityExpr, LT(1)=or
exit    logicalAndExpr, LT(1)=or
enter   logicalOrExpr, LT(1)=or
consume [@49,210:211='or',<16>,16:13] rule logicalOrExpr
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@50,213:219='myField',<26>,16:16] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@51,221:222='==',<18>,16:24] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@52,224:225='10',<27>,16:27] rule primaryExpr
exit    primaryExpr, LT(1)=and
exit    multiplicativeExpr, LT(1)=and
exit    additiveExpr, LT(1)=and
exit    relationalExpr, LT(1)=and
exit    equalityExpr, LT(1)=and
enter   logicalAndExpr, LT(1)=and
consume [@53,227:229='and',<17>,16:30] rule logicalAndExpr
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@54,231:233='not',<25>,16:34] rule primaryExpr
enter   primaryExpr, LT(1)=isTrue
consume [@55,235:240='isTrue',<26>,16:38] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@56,241:241=')',<6>,16:44] rule conditional
enter   block, LT(1)={
consume [@57,243:243='{',<1>,16:46] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@58,249:254='return',<14>,17:3] rule return
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@59,256:259='True',<23>,17:10] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@60,260:260=';',<4>,17:14] rule stmt
exit    stmt, LT(1)=}
consume [@61,265:265='}',<3>,18:2] rule block
exit    block, LT(1)=else
consume [@62,267:270='else',<12>,18:4] rule conditional
enter   block, LT(1)={
consume [@63,272:272='{',<1>,18:9] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@64,278:283='return',<14>,19:3] rule return
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@65,285:289='False',<24>,19:10] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@66,290:290=';',<4>,19:15] rule stmt
exit    stmt, LT(1)=}
consume [@67,295:295='}',<3>,20:2] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@68,299:299='}',<3>,21:1] rule block
exit    block, LT(1)=void
exit    methodDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@69,305:308='void',<10>,23:1] rule dataType
exit    dataType, LT(1)=callMethodIfNot
consume [@70,310:324='callMethodIfNot',<26>,23:6] rule methodDecl
consume [@71,325:325='(',<5>,23:21] rule methodDecl
consume [@72,326:326=')',<6>,23:22] rule methodDecl
enter   block, LT(1)={
consume [@73,327:327='{',<1>,23:23] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@74,332:333='if',<11>,24:2] rule conditional
consume [@75,335:335='(',<5>,24:5] rule conditional
enter   expr, LT(1)=not
enter   logicalOrExpr, LT(1)=not
enter   logicalAndExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@76,336:338='not',<25>,24:6] rule primaryExpr
enter   primaryExpr, LT(1)=myField
consume [@77,340:346='myField',<26>,24:10] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@78,348:349='==',<18>,24:18] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@79,351:352='10',<27>,24:21] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@80,353:353=')',<6>,24:23] rule conditional
enter   block, LT(1)={
consume [@81,354:354='{',<1>,24:24] rule block
enter   stmt, LT(1)=myMethod
enter   expr, LT(1)=myMethod
enter   logicalOrExpr, LT(1)=myMethod
enter   logicalAndExpr, LT(1)=myMethod
enter   equalityExpr, LT(1)=myMethod
enter   relationalExpr, LT(1)=myMethod
enter   additiveExpr, LT(1)=myMethod
enter   multiplicativeExpr, LT(1)=myMethod
enter   primaryExpr, LT(1)=myMethod
enter   methodCall, LT(1)=myMethod
consume [@82,360:367='myMethod',<26>,25:3] rule methodCall
consume [@83,368:368='(',<5>,25:11] rule methodCall
enter   arguments, LT(1)=10
enter   argument, LT(1)=10
enter   expr, LT(1)=10
enter   logicalOrExpr, LT(1)=10
enter   logicalAndExpr, LT(1)=10
enter   equalityExpr, LT(1)=10
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@84,369:370='10',<27>,25:12] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
exit    argument, LT(1)=)
exit    arguments, LT(1)=)
consume [@85,371:371=')',<6>,25:14] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@86,372:372=';',<4>,25:15] rule stmt
exit    stmt, LT(1)=}
consume [@87,377:377='}',<3>,26:2] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@88,381:381='}',<3>,27:1] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@89,386:386='}',<3>,29:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@90,389:388='<EOF>',<-1>,30:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (methodDecl:1 (dataType:1 void) main ( ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 0))))))))) ;) (stmt:1 (conditional:2 while ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))) + (multiplicativeExpr:1 (primaryExpr:3 1))))))))) ;) }))) (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 callMethodIfNot ( )))))))))) ;) })) (methodDecl:1 (dataType:1 bool) myMethod ( (params:1 (param:1 (dataType:1 int) x) , (param:1 (dataType:1 bool) isTrue)) ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 x)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))) or (logicalAndExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))) and (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 isTrue))))))))) ) (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 True))))))))) ;) }) else (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:6 False))))))))) ;) }))) })) (methodDecl:1 (dataType:1 void) callMethodIfNot ( ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 myField)))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 myMethod ( (arguments:1 (argument:1 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))))) )))))))))) ;) }))) }))) }) <EOF>)
