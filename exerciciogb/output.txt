[@0,0:0='{',<'{'>,1:0]
[@1,4:8='class',<'class'>,2:1]
[@2,10:16='MyClass',<IDENTIFICADOR>,2:7]
[@3,24:26='int',<'int'>,4:1]
[@4,28:34='myField',<IDENTIFICADOR>,4:5]
[@5,35:35=';',<';'>,4:12]
[@6,41:44='void',<'void'>,6:1]
[@7,46:49='main',<IDENTIFICADOR>,6:6]
[@8,50:50='(',<'('>,6:10]
[@9,51:51=')',<')'>,6:11]
[@10,53:53='{',<'{'>,6:13]
[@11,60:66='myField',<IDENTIFICADOR>,8:2]
[@12,68:68='=',<'='>,8:10]
[@13,70:70='0',<DECIMAL>,8:12]
[@14,71:71=';',<';'>,8:13]
[@15,76:80='while',<'while'>,9:2]
[@16,82:82='(',<'('>,9:8]
[@17,83:89='myField',<IDENTIFICADOR>,9:9]
[@18,91:91='<',<'<'>,9:17]
[@19,93:94='10',<DECIMAL>,9:19]
[@20,95:95=')',<')'>,9:21]
[@21,97:97='{',<'{'>,9:23]
[@22,103:109='myField',<IDENTIFICADOR>,10:3]
[@23,111:111='=',<'='>,10:11]
[@24,113:119='myField',<IDENTIFICADOR>,10:13]
[@25,121:121='+',<'+'>,10:21]
[@26,123:123='1',<DECIMAL>,10:23]
[@27,124:124=';',<';'>,10:24]
[@28,129:129='}',<'}'>,11:2]
[@29,134:148='callMethodIfNot',<IDENTIFICADOR>,12:2]
[@30,149:149='(',<'('>,12:17]
[@31,150:150=')',<')'>,12:18]
[@32,151:151=';',<';'>,12:19]
[@33,157:157='}',<'}'>,14:1]
[@34,163:166='bool',<'bool'>,16:1]
[@35,168:175='myMethod',<IDENTIFICADOR>,16:6]
[@36,176:176='(',<'('>,16:14]
[@37,177:179='int',<'int'>,16:15]
[@38,181:181='x',<IDENTIFICADOR>,16:19]
[@39,182:182=',',<','>,16:20]
[@40,184:187='bool',<'bool'>,16:22]
[@41,189:194='isTrue',<IDENTIFICADOR>,16:27]
[@42,195:195=')',<')'>,16:33]
[@43,197:197='{',<'{'>,16:35]
[@44,202:203='if',<'if'>,17:2]
[@45,205:205='(',<'('>,17:5]
[@46,206:206='x',<IDENTIFICADOR>,17:6]
[@47,208:208='<',<'<'>,17:8]
[@48,210:211='10',<DECIMAL>,17:10]
[@49,213:214='or',<'or'>,17:13]
[@50,216:222='myField',<IDENTIFICADOR>,17:16]
[@51,224:225='==',<'=='>,17:24]
[@52,227:228='10',<DECIMAL>,17:27]
[@53,230:232='and',<'and'>,17:30]
[@54,234:236='not',<'not'>,17:34]
[@55,238:243='isTrue',<IDENTIFICADOR>,17:38]
[@56,244:244=')',<')'>,17:44]
[@57,246:246='{',<'{'>,17:46]
[@58,252:257='return',<'return'>,18:3]
[@59,259:262='True',<'True'>,18:10]
[@60,263:263=';',<';'>,18:14]
[@61,268:268='}',<'}'>,19:2]
[@62,270:273='else',<'else'>,19:4]
[@63,275:275='{',<'{'>,19:9]
[@64,281:286='return',<'return'>,20:3]
[@65,288:292='False',<'False'>,20:10]
[@66,293:293=';',<';'>,20:15]
[@67,298:298='}',<'}'>,21:2]
[@68,302:302='}',<'}'>,22:1]
[@69,308:311='void',<'void'>,24:1]
[@70,313:327='callMethodIfNot',<IDENTIFICADOR>,24:6]
[@71,328:328='(',<'('>,24:21]
[@72,329:329=')',<')'>,24:22]
[@73,330:330='{',<'{'>,24:23]
[@74,335:336='if',<'if'>,25:2]
[@75,338:338='(',<'('>,25:5]
[@76,339:341='not',<'not'>,25:6]
[@77,343:349='myField',<IDENTIFICADOR>,25:10]
[@78,351:352='==',<'=='>,25:18]
[@79,354:355='10',<DECIMAL>,25:21]
[@80,356:356=')',<')'>,25:23]
[@81,357:357='{',<'{'>,25:24]
[@82,363:370='myMethod',<IDENTIFICADOR>,26:3]
[@83,371:371='(',<'('>,26:11]
[@84,372:373='10',<DECIMAL>,26:12]
[@85,374:374=')',<')'>,26:14]
[@86,375:375=';',<';'>,26:15]
[@87,380:380='}',<'}'>,27:2]
[@88,384:384='}',<'}'>,28:1]
[@89,389:389='}',<'}'>,30:0]
[@90,392:391='<EOF>',<EOF>,31:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<1>,1:0] rule classDecl
consume [@1,4:8='class',<2>,2:1] rule classDecl
consume [@2,10:16='MyClass',<26>,2:7] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,24:26='int',<8>,4:1] rule dataType
exit    dataType, LT(1)=myField
consume [@4,28:34='myField',<26>,4:5] rule fieldDecl
consume [@5,35:35=';',<4>,4:12] rule fieldDecl
exit    fieldDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@6,41:44='void',<10>,6:1] rule dataType
exit    dataType, LT(1)=main
consume [@7,46:49='main',<26>,6:6] rule methodDecl
consume [@8,50:50='(',<5>,6:10] rule methodDecl
consume [@9,51:51=')',<6>,6:11] rule methodDecl
enter   block, LT(1)={
consume [@10,53:53='{',<1>,6:13] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@11,60:66='myField',<26>,8:2] rule assign
consume [@12,68:68='=',<15>,8:10] rule assign
enter   expr, LT(1)=0
enter   logicalOrExpr, LT(1)=0
enter   logicalAndExpr, LT(1)=0
enter   equalityExpr, LT(1)=0
enter   relationalExpr, LT(1)=0
enter   additiveExpr, LT(1)=0
enter   multiplicativeExpr, LT(1)=0
enter   primaryExpr, LT(1)=0
consume [@13,70:70='0',<27>,8:12] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@14,71:71=';',<4>,8:13] rule stmt
exit    stmt, LT(1)=while
enter   stmt, LT(1)=while
enter   conditional, LT(1)=while
consume [@15,76:80='while',<13>,9:2] rule conditional
consume [@16,82:82='(',<5>,9:8] rule conditional
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@17,83:89='myField',<26>,9:9] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@18,91:91='<',<19>,9:17] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@19,93:94='10',<27>,9:19] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@20,95:95=')',<6>,9:21] rule conditional
enter   block, LT(1)={
consume [@21,97:97='{',<1>,9:23] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@22,103:109='myField',<26>,10:3] rule assign
consume [@23,111:111='=',<15>,10:11] rule assign
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@24,113:119='myField',<26>,10:13] rule primaryExpr
exit    primaryExpr, LT(1)=+
exit    multiplicativeExpr, LT(1)=+
enter   additiveExpr, LT(1)=+
consume [@25,121:121='+',<21>,10:21] rule additiveExpr
enter   multiplicativeExpr, LT(1)=1
enter   primaryExpr, LT(1)=1
consume [@26,123:123='1',<27>,10:23] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@27,124:124=';',<4>,10:24] rule stmt
exit    stmt, LT(1)=}
consume [@28,129:129='}',<3>,11:2] rule block
exit    block, LT(1)=callMethodIfNot
exit    conditional, LT(1)=callMethodIfNot
exit    stmt, LT(1)=callMethodIfNot
enter   stmt, LT(1)=callMethodIfNot
enter   expr, LT(1)=callMethodIfNot
enter   logicalOrExpr, LT(1)=callMethodIfNot
enter   logicalAndExpr, LT(1)=callMethodIfNot
enter   equalityExpr, LT(1)=callMethodIfNot
enter   relationalExpr, LT(1)=callMethodIfNot
enter   additiveExpr, LT(1)=callMethodIfNot
enter   multiplicativeExpr, LT(1)=callMethodIfNot
enter   primaryExpr, LT(1)=callMethodIfNot
enter   methodCall, LT(1)=callMethodIfNot
consume [@29,134:148='callMethodIfNot',<26>,12:2] rule methodCall
consume [@30,149:149='(',<5>,12:17] rule methodCall
consume [@31,150:150=')',<6>,12:18] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@32,151:151=';',<4>,12:19] rule stmt
exit    stmt, LT(1)=}
consume [@33,157:157='}',<3>,14:1] rule block
exit    block, LT(1)=bool
exit    methodDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@34,163:166='bool',<9>,16:1] rule dataType
exit    dataType, LT(1)=myMethod
consume [@35,168:175='myMethod',<26>,16:6] rule methodDecl
consume [@36,176:176='(',<5>,16:14] rule methodDecl
enter   params, LT(1)=int
enter   param, LT(1)=int
enter   dataType, LT(1)=int
consume [@37,177:179='int',<8>,16:15] rule dataType
exit    dataType, LT(1)=x
consume [@38,181:181='x',<26>,16:19] rule param
exit    param, LT(1)=,
consume [@39,182:182=',',<7>,16:20] rule params
enter   param, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@40,184:187='bool',<9>,16:22] rule dataType
exit    dataType, LT(1)=isTrue
consume [@41,189:194='isTrue',<26>,16:27] rule param
exit    param, LT(1)=)
exit    params, LT(1)=)
consume [@42,195:195=')',<6>,16:33] rule methodDecl
enter   block, LT(1)={
consume [@43,197:197='{',<1>,16:35] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@44,202:203='if',<11>,17:2] rule conditional
consume [@45,205:205='(',<5>,17:5] rule conditional
enter   expr, LT(1)=x
enter   logicalOrExpr, LT(1)=x
enter   logicalAndExpr, LT(1)=x
enter   equalityExpr, LT(1)=x
enter   relationalExpr, LT(1)=x
enter   additiveExpr, LT(1)=x
enter   multiplicativeExpr, LT(1)=x
enter   primaryExpr, LT(1)=x
consume [@46,206:206='x',<26>,17:6] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@47,208:208='<',<19>,17:8] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@48,210:211='10',<27>,17:10] rule primaryExpr
exit    primaryExpr, LT(1)=or
exit    multiplicativeExpr, LT(1)=or
exit    additiveExpr, LT(1)=or
exit    relationalExpr, LT(1)=or
exit    equalityExpr, LT(1)=or
exit    logicalAndExpr, LT(1)=or
enter   logicalOrExpr, LT(1)=or
consume [@49,213:214='or',<16>,17:13] rule logicalOrExpr
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@50,216:222='myField',<26>,17:16] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@51,224:225='==',<18>,17:24] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@52,227:228='10',<27>,17:27] rule primaryExpr
exit    primaryExpr, LT(1)=and
exit    multiplicativeExpr, LT(1)=and
exit    additiveExpr, LT(1)=and
exit    relationalExpr, LT(1)=and
exit    equalityExpr, LT(1)=and
enter   logicalAndExpr, LT(1)=and
consume [@53,230:232='and',<17>,17:30] rule logicalAndExpr
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@54,234:236='not',<25>,17:34] rule primaryExpr
enter   primaryExpr, LT(1)=isTrue
consume [@55,238:243='isTrue',<26>,17:38] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@56,244:244=')',<6>,17:44] rule conditional
enter   block, LT(1)={
consume [@57,246:246='{',<1>,17:46] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@58,252:257='return',<14>,18:3] rule return
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@59,259:262='True',<23>,18:10] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@60,263:263=';',<4>,18:14] rule stmt
exit    stmt, LT(1)=}
consume [@61,268:268='}',<3>,19:2] rule block
exit    block, LT(1)=else
consume [@62,270:273='else',<12>,19:4] rule conditional
enter   block, LT(1)={
consume [@63,275:275='{',<1>,19:9] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@64,281:286='return',<14>,20:3] rule return
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@65,288:292='False',<24>,20:10] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@66,293:293=';',<4>,20:15] rule stmt
exit    stmt, LT(1)=}
consume [@67,298:298='}',<3>,21:2] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@68,302:302='}',<3>,22:1] rule block
exit    block, LT(1)=void
exit    methodDecl, LT(1)=void
enter   methodDecl, LT(1)=void
enter   dataType, LT(1)=void
consume [@69,308:311='void',<10>,24:1] rule dataType
exit    dataType, LT(1)=callMethodIfNot
consume [@70,313:327='callMethodIfNot',<26>,24:6] rule methodDecl
consume [@71,328:328='(',<5>,24:21] rule methodDecl
consume [@72,329:329=')',<6>,24:22] rule methodDecl
enter   block, LT(1)={
consume [@73,330:330='{',<1>,24:23] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@74,335:336='if',<11>,25:2] rule conditional
consume [@75,338:338='(',<5>,25:5] rule conditional
enter   expr, LT(1)=not
enter   logicalOrExpr, LT(1)=not
enter   logicalAndExpr, LT(1)=not
enter   equalityExpr, LT(1)=not
enter   relationalExpr, LT(1)=not
enter   additiveExpr, LT(1)=not
enter   multiplicativeExpr, LT(1)=not
enter   primaryExpr, LT(1)=not
consume [@76,339:341='not',<25>,25:6] rule primaryExpr
enter   primaryExpr, LT(1)=myField
consume [@77,343:349='myField',<26>,25:10] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@78,351:352='==',<18>,25:18] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@79,354:355='10',<27>,25:21] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@80,356:356=')',<6>,25:23] rule conditional
enter   block, LT(1)={
consume [@81,357:357='{',<1>,25:24] rule block
enter   stmt, LT(1)=myMethod
enter   expr, LT(1)=myMethod
enter   logicalOrExpr, LT(1)=myMethod
enter   logicalAndExpr, LT(1)=myMethod
enter   equalityExpr, LT(1)=myMethod
enter   relationalExpr, LT(1)=myMethod
enter   additiveExpr, LT(1)=myMethod
enter   multiplicativeExpr, LT(1)=myMethod
enter   primaryExpr, LT(1)=myMethod
enter   methodCall, LT(1)=myMethod
consume [@82,363:370='myMethod',<26>,26:3] rule methodCall
consume [@83,371:371='(',<5>,26:11] rule methodCall
enter   arguments, LT(1)=10
enter   expr, LT(1)=10
enter   logicalOrExpr, LT(1)=10
enter   logicalAndExpr, LT(1)=10
enter   equalityExpr, LT(1)=10
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@84,372:373='10',<27>,26:12] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
exit    arguments, LT(1)=)
consume [@85,374:374=')',<6>,26:14] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@86,375:375=';',<4>,26:15] rule stmt
exit    stmt, LT(1)=}
consume [@87,380:380='}',<3>,27:2] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@88,384:384='}',<3>,28:1] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@89,389:389='}',<3>,30:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@90,392:391='<EOF>',<-1>,31:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (methodDecl:1 (dataType:1 void) main ( ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 0))))))))) ;) (stmt:1 (conditional:2 while ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))) + (multiplicativeExpr:1 (primaryExpr:3 1))))))))) ;) }))) (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 callMethodIfNot ( )))))))))) ;) })) (methodDecl:1 (dataType:1 bool) myMethod ( (params:1 (param:1 (dataType:1 int) x) , (param:1 (dataType:1 bool) isTrue)) ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 x)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))) or (logicalAndExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))) and (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 isTrue))))))))) ) (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 True))))))))) ;) }) else (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:6 False))))))))) ;) }))) })) (methodDecl:1 (dataType:1 void) callMethodIfNot ( ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:7 not (primaryExpr:2 myField)))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 myMethod ( (arguments:1 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10))))))))) )))))))))) ;) }))) }))) }) <EOF>)
