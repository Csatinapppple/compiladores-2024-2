[@0,0:0='{',<'{'>,1:0]
[@1,7:11='class',<'class'>,2:4]
[@2,13:19='MyClass',<IDENTIFICADOR>,2:10]
[@3,29:31='int',<'int'>,4:4]
[@4,33:39='myField',<IDENTIFICADOR>,4:8]
[@5,40:40=';',<';'>,4:15]
[@6,49:52='void',<'void'>,6:4]
[@7,54:57='main',<'main'>,6:9]
[@8,58:58='(',<'('>,6:13]
[@9,59:59=')',<')'>,6:14]
[@10,61:61='{',<'{'>,6:16]
[@11,74:80='myField',<IDENTIFICADOR>,8:8]
[@12,82:82='=',<'='>,8:16]
[@13,84:84='0',<DECIMAL>,8:18]
[@14,85:85=';',<';'>,8:19]
[@15,96:100='while',<'while'>,9:8]
[@16,102:102='(',<'('>,9:14]
[@17,104:110='myField',<IDENTIFICADOR>,9:16]
[@18,112:112='<',<'<'>,9:24]
[@19,114:115='10',<DECIMAL>,9:26]
[@20,117:117=')',<')'>,9:29]
[@21,119:119='{',<'{'>,9:31]
[@22,134:140='myField',<IDENTIFICADOR>,10:12]
[@23,142:142='=',<'='>,10:20]
[@24,144:150='myField',<IDENTIFICADOR>,10:22]
[@25,152:152='+',<'+'>,10:30]
[@26,154:154='1',<DECIMAL>,10:32]
[@27,155:155=';',<';'>,10:33]
[@28,166:166='}',<'}'>,11:8]
[@29,177:184='myMethod',<IDENTIFICADOR>,12:8]
[@30,185:185='(',<'('>,12:16]
[@31,186:186=')',<')'>,12:17]
[@32,187:187=';',<';'>,12:18]
[@33,196:196='}',<'}'>,14:4]
[@34,205:208='bool',<'bool'>,16:4]
[@35,210:217='myMethod',<IDENTIFICADOR>,16:9]
[@36,218:218='(',<'('>,16:17]
[@37,219:219=')',<')'>,16:18]
[@38,221:221='{',<'{'>,16:20]
[@39,232:233='if',<'if'>,17:8]
[@40,235:235='(',<'('>,17:11]
[@41,237:243='myField',<IDENTIFICADOR>,17:13]
[@42,245:246='==',<'=='>,17:21]
[@43,248:249='10',<DECIMAL>,17:24]
[@44,251:251=')',<')'>,17:27]
[@45,253:253='{',<'{'>,17:29]
[@46,268:273='return',<'return'>,18:12]
[@47,275:278='True',<'True'>,18:19]
[@48,279:279=';',<';'>,18:23]
[@49,290:290='}',<'}'>,19:8]
[@50,292:295='else',<'else'>,19:10]
[@51,297:297='{',<'{'>,19:15]
[@52,312:317='return',<'return'>,20:12]
[@53,319:323='False',<'False'>,20:19]
[@54,324:324=';',<';'>,20:24]
[@55,335:335='}',<'}'>,21:8]
[@56,342:342='}',<'}'>,22:4]
[@57,345:345='}',<'}'>,23:0]
[@58,348:347='<EOF>',<EOF>,24:0]
enter   program, LT(1)={
enter   classDecl, LT(1)={
consume [@0,0:0='{',<25>,1:0] rule classDecl
consume [@1,7:11='class',<1>,2:4] rule classDecl
consume [@2,13:19='MyClass',<27>,2:10] rule classDecl
enter   classBody, LT(1)=int
enter   fieldDecl, LT(1)=int
enter   dataType, LT(1)=int
consume [@3,29:31='int',<8>,4:4] rule dataType
exit    dataType, LT(1)=myField
consume [@4,33:39='myField',<27>,4:8] rule fieldDecl
consume [@5,40:40=';',<2>,4:15] rule fieldDecl
exit    fieldDecl, LT(1)=void
enter   mainDecl, LT(1)=void
consume [@6,49:52='void',<3>,6:4] rule mainDecl
consume [@7,54:57='main',<4>,6:9] rule mainDecl
consume [@8,58:58='(',<5>,6:13] rule mainDecl
consume [@9,59:59=')',<6>,6:14] rule mainDecl
enter   block, LT(1)={
consume [@10,61:61='{',<25>,6:16] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@11,74:80='myField',<27>,8:8] rule assign
consume [@12,82:82='=',<14>,8:16] rule assign
enter   expr, LT(1)=0
enter   logicalOrExpr, LT(1)=0
enter   logicalAndExpr, LT(1)=0
enter   equalityExpr, LT(1)=0
enter   relationalExpr, LT(1)=0
enter   additiveExpr, LT(1)=0
enter   multiplicativeExpr, LT(1)=0
enter   primaryExpr, LT(1)=0
consume [@13,84:84='0',<28>,8:18] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@14,85:85=';',<2>,8:19] rule stmt
exit    stmt, LT(1)=while
enter   stmt, LT(1)=while
enter   conditional, LT(1)=while
consume [@15,96:100='while',<12>,9:8] rule conditional
consume [@16,102:102='(',<5>,9:14] rule conditional
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@17,104:110='myField',<27>,9:16] rule primaryExpr
exit    primaryExpr, LT(1)=<
exit    multiplicativeExpr, LT(1)=<
exit    additiveExpr, LT(1)=<
enter   relationalExpr, LT(1)=<
consume [@18,112:112='<',<18>,9:24] rule relationalExpr
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@19,114:115='10',<28>,9:26] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@20,117:117=')',<6>,9:29] rule conditional
enter   block, LT(1)={
consume [@21,119:119='{',<25>,9:31] rule block
enter   stmt, LT(1)=myField
enter   assign, LT(1)=myField
consume [@22,134:140='myField',<27>,10:12] rule assign
consume [@23,142:142='=',<14>,10:20] rule assign
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@24,144:150='myField',<27>,10:22] rule primaryExpr
exit    primaryExpr, LT(1)=+
exit    multiplicativeExpr, LT(1)=+
enter   additiveExpr, LT(1)=+
consume [@25,152:152='+',<20>,10:30] rule additiveExpr
enter   multiplicativeExpr, LT(1)=1
enter   primaryExpr, LT(1)=1
consume [@26,154:154='1',<28>,10:32] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    assign, LT(1)=;
consume [@27,155:155=';',<2>,10:33] rule stmt
exit    stmt, LT(1)=}
consume [@28,166:166='}',<26>,11:8] rule block
exit    block, LT(1)=myMethod
exit    conditional, LT(1)=myMethod
exit    stmt, LT(1)=myMethod
enter   stmt, LT(1)=myMethod
enter   expr, LT(1)=myMethod
enter   logicalOrExpr, LT(1)=myMethod
enter   logicalAndExpr, LT(1)=myMethod
enter   equalityExpr, LT(1)=myMethod
enter   relationalExpr, LT(1)=myMethod
enter   additiveExpr, LT(1)=myMethod
enter   multiplicativeExpr, LT(1)=myMethod
enter   primaryExpr, LT(1)=myMethod
enter   methodCall, LT(1)=myMethod
consume [@29,177:184='myMethod',<27>,12:8] rule methodCall
consume [@30,185:185='(',<5>,12:16] rule methodCall
consume [@31,186:186=')',<6>,12:17] rule methodCall
exit    methodCall, LT(1)=;
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
consume [@32,187:187=';',<2>,12:18] rule stmt
exit    stmt, LT(1)=}
consume [@33,196:196='}',<26>,14:4] rule block
exit    block, LT(1)=bool
exit    mainDecl, LT(1)=bool
enter   methodDecl, LT(1)=bool
enter   dataType, LT(1)=bool
consume [@34,205:208='bool',<9>,16:4] rule dataType
exit    dataType, LT(1)=myMethod
consume [@35,210:217='myMethod',<27>,16:9] rule methodDecl
consume [@36,218:218='(',<5>,16:17] rule methodDecl
consume [@37,219:219=')',<6>,16:18] rule methodDecl
enter   block, LT(1)={
consume [@38,221:221='{',<25>,16:20] rule block
enter   stmt, LT(1)=if
enter   conditional, LT(1)=if
consume [@39,232:233='if',<10>,17:8] rule conditional
consume [@40,235:235='(',<5>,17:11] rule conditional
enter   expr, LT(1)=myField
enter   logicalOrExpr, LT(1)=myField
enter   logicalAndExpr, LT(1)=myField
enter   equalityExpr, LT(1)=myField
enter   relationalExpr, LT(1)=myField
enter   additiveExpr, LT(1)=myField
enter   multiplicativeExpr, LT(1)=myField
enter   primaryExpr, LT(1)=myField
consume [@41,237:243='myField',<27>,17:13] rule primaryExpr
exit    primaryExpr, LT(1)===
exit    multiplicativeExpr, LT(1)===
exit    additiveExpr, LT(1)===
exit    relationalExpr, LT(1)===
enter   equalityExpr, LT(1)===
consume [@42,245:246='==',<17>,17:21] rule equalityExpr
enter   relationalExpr, LT(1)=10
enter   additiveExpr, LT(1)=10
enter   multiplicativeExpr, LT(1)=10
enter   primaryExpr, LT(1)=10
consume [@43,248:249='10',<28>,17:24] rule primaryExpr
exit    primaryExpr, LT(1)=)
exit    multiplicativeExpr, LT(1)=)
exit    additiveExpr, LT(1)=)
exit    relationalExpr, LT(1)=)
exit    equalityExpr, LT(1)=)
exit    logicalAndExpr, LT(1)=)
exit    logicalOrExpr, LT(1)=)
exit    expr, LT(1)=)
consume [@44,251:251=')',<6>,17:27] rule conditional
enter   block, LT(1)={
consume [@45,253:253='{',<25>,17:29] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@46,268:273='return',<13>,18:12] rule return
enter   expr, LT(1)=True
enter   logicalOrExpr, LT(1)=True
enter   logicalAndExpr, LT(1)=True
enter   equalityExpr, LT(1)=True
enter   relationalExpr, LT(1)=True
enter   additiveExpr, LT(1)=True
enter   multiplicativeExpr, LT(1)=True
enter   primaryExpr, LT(1)=True
consume [@47,275:278='True',<22>,18:19] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@48,279:279=';',<2>,18:23] rule stmt
exit    stmt, LT(1)=}
consume [@49,290:290='}',<26>,19:8] rule block
exit    block, LT(1)=else
consume [@50,292:295='else',<11>,19:10] rule conditional
enter   block, LT(1)={
consume [@51,297:297='{',<25>,19:15] rule block
enter   stmt, LT(1)=return
enter   return, LT(1)=return
consume [@52,312:317='return',<13>,20:12] rule return
enter   expr, LT(1)=False
enter   logicalOrExpr, LT(1)=False
enter   logicalAndExpr, LT(1)=False
enter   equalityExpr, LT(1)=False
enter   relationalExpr, LT(1)=False
enter   additiveExpr, LT(1)=False
enter   multiplicativeExpr, LT(1)=False
enter   primaryExpr, LT(1)=False
consume [@53,319:323='False',<23>,20:19] rule primaryExpr
exit    primaryExpr, LT(1)=;
exit    multiplicativeExpr, LT(1)=;
exit    additiveExpr, LT(1)=;
exit    relationalExpr, LT(1)=;
exit    equalityExpr, LT(1)=;
exit    logicalAndExpr, LT(1)=;
exit    logicalOrExpr, LT(1)=;
exit    expr, LT(1)=;
exit    return, LT(1)=;
consume [@54,324:324=';',<2>,20:24] rule stmt
exit    stmt, LT(1)=}
consume [@55,335:335='}',<26>,21:8] rule block
exit    block, LT(1)=}
exit    conditional, LT(1)=}
exit    stmt, LT(1)=}
consume [@56,342:342='}',<26>,22:4] rule block
exit    block, LT(1)=}
exit    methodDecl, LT(1)=}
exit    classBody, LT(1)=}
consume [@57,345:345='}',<26>,23:0] rule classDecl
exit    classDecl, LT(1)=<EOF>
consume [@58,348:347='<EOF>',<-1>,24:0] rule program
exit    program, LT(1)=<EOF>
(program:1 (classDecl:1 { class MyClass (classBody:1 (fieldDecl:1 (dataType:1 int) myField ;) (mainDecl:1 void main ( ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 0))))))))) ;) (stmt:1 (conditional:2 while ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField)))) < (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:3 (assign:1 myField = (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))) + (multiplicativeExpr:1 (primaryExpr:3 1))))))))) ;) }))) (stmt:4 (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:4 (methodCall:1 myMethod ( )))))))))) ;) })) (methodDecl:1 (dataType:1 bool) myMethod ( ) (block:1 { (stmt:1 (conditional:1 if ( (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:2 myField))))) == (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:3 10)))))))) ) (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:5 True))))))))) ;) }) else (block:1 { (stmt:2 (return:1 return (expr:1 (logicalOrExpr:1 (logicalAndExpr:1 (equalityExpr:1 (relationalExpr:1 (additiveExpr:1 (multiplicativeExpr:1 (primaryExpr:6 False))))))))) ;) }))) }))) }) <EOF>)
